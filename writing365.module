<?php
/* File: writing365.module
 * Version 7105
 * Updated: 11-12-2015
 * Changes: Added code to scorecard that corrects for Daylight/Standard timne changes.
 * Modified block: writing365_scorecard() Lines: 453-515
 *
 * Version: 7104
 * Updated: 8/7/2015
 * Changes: Permissions updated to accommodate the new Reports and Registration module 
 * writing365 info changed to create name change in permissions list writing365->Write 365
 *
 * writing365_permissions
 * 	-removed 'view instructor reports' permission (moved into Reports and Registration module
 * 	-modified description of 'administer write365' permission: removed "and view all site-wide administrative reports"
 * 	-delete write365_user_login() function as part of general cleanup (not implemented)
 * 
 *
 * Version: 7103
 * Updated: 2/16/2015
 * Changes:
 * - Added new files
 *	  * hide_textarea.css
 *	  * show_textarea.js
 *
 * writing365_node_insert:
 *	  - flag is now set if WPM>250 and wordcount>50 are true
 *	  - fixed an issue with posting a blank journal entry when entering a unique title
 *	  - fixed watchdog command having incorrect arguments (must have array()) wihch
 *		prevented admins from viewing error message log
 *	  - added error log message if journal is created without javascript
 * 
 * writing365_node_update:
 * 	  - the flag can now be set when updating a journal
 *	  - fixed an issue where the content type was not being checked before execution
 *	  - fixed watchdog command having incorrect arguments (must have array()) wihch
 *		prevented admins from viewing error message log
 *	  - added error log message if journal is updated without javascript
 * 
 * writing365_form_node_alter:
 *	  - loads hide_textarea.css to remove the form when the user has javascript turned off.
 *		Having the form hidden is now default behavior.
 *
 * writing365_form_node_form_alter:
 *	  - loads show_textarea.css to show the form when javascript is turned on.
 *	  - if node is being updated, set default value of journal to previous value.
 *	  - fixed the blank space between the scorecard and the title that was causing issues.
 *
 *
 *
 * Version: 7102
 * Updated: 1/30/2015
 * Changes:
 * writing365.module:
 * - Ninor reformatting of various parts of the code throughout this module
 * - Repositioned functions in the file
 * 
 * - writing365_node_insert & writing365_node_update:
 *    ~ Added variables $words_per_minute and $flag. Flag is set to 1 if the default
 *      value of the hidden_wordcount is not changed from 'nojs'.
 *	  ~ Added variable $total_time, corresponding to the total time writing.
 * 		  ~ When updating a node, it will correctly accumulate more time
 *    ~ Native PHP str_word_count is used to count the words if javascript is turned off
 *    ~ Notifies user to turn on javascript if $flag == 1
 * 	  ~ Node_update now checks if the node exists at the beginning of the code rather
 *		than in the middle. This was done to handle the case where the user submits no 
 *		changes.
 *	  ~ Once the flag is set on a node, the user has no way of changing it.
 *
 * - writing365_form_node_form_alter:
 *    ~ drupal_add_js now adds two files: wordcounter.js and words_per_minute.js
 *	  - Added css for the scorecard into the module folder instead of CSS injector:
 *		  ~ The file is located in /writing365/css/scorecard.css
 *    ~ The default value of the journal entry is "<onid_name>'s journal entry"
 *		  ~ This was done because submitting a journal without having a title broke the 
 *			wordcounter
 *    ~ Added <noscript> at the top of the form telling user to turn on javascript
 *    ~ Changed scorecard to not be collapsed by default
 *    ~ Added extra space between the scorecard and the text area
 *    ~ Added hidden fields for javascript variables:
 *		  ~ Wordcounter, words_per_minute counter, time_start, time_writing
 *		  ~ Time_start is currently used to calculate timewriting when js is disabled
 *	  ~ Added field in the database for timewriting (on playground)
 *    ~ Wordsperminute changed to words_per_minute due to javascript filename change
 *		  x May want to change database schema to match this in the future
 *		  ~ words_per_minute is a hidden field
 *
 * - writing365_block_view:
 *	  ~ Slightly modified the switch statement to make it easier to read and to add new
 *		case, particularly for the instructor reports later on.
 *	  ~ Uses a new function called get_user_id() to get the uid
 *
 * - writing365_menu:
 *    ~ $items['writing365'] access agruments is now 'administer write365'
 *
 * - (Added) writing365_scorecard:
 *    ~ Added a loop that pulls students data from the database and stores it in an
 *      array. That array is passed to javascript and then the javascript adds
 *      the functionality to the form.
 *	  x Need to have pictures hyperlink to edit any particular node
 *
 * - (Added) get_user_id:
 *    ~ Returns the uid of the currently logged in user that initiates the function.
 *      in the future we can include this in more places of the module, for now it
 *      exists.
 *	  x Will need to distinguish when to use $account and when to use $user.
 *
 * js folder:
 * - Important javascript functions are now broken up into seperate .js files.
 *    ~ Files are scorecard.js, wordcounter.js, and words_per_minute.js.
 */

/**
 * @file
 * Enables journals used to encourage student writing. Extends Drupal Core's blog module
 */

/**
 * Implements hook_node_info().
 */

function writing365_node_info()
{
    return array(
        'writing365' => array(
            'name' => t('Write 365 Journal Entry'),
            'base' => 'writing365',
            'description' => t('Use for Write 365 journals. Every student gets a personal journal.'),
            'help' => t('The writing you produce here is visible only to you. Write at least 365 words in one or more sessions today, and you will get credit for it.'),
            'has_title' => TRUE,
            'locked' => TRUE,
        )
    );
}

/**
 * Implements hook_node_delete()
 */
function writing365_node_delete($node)
{
    $type = node_type_get_name($node);
    if ($type == 'Write 365 Journal Entry') {
        db_delete('W365_JournalNodeData')->condition('nid', $node->nid)->execute();
    }
}

/**
 * Implements hook_node_insert()
 */
function writing365_node_insert($node)
{
    $type = node_type_get_name($node);
    if ($type == 'Write 365 Journal Entry') {
        $nid = '';
        $word_count = 0;
        $words_per_minute = 0;
        $flag = 0;
        $total_time = 0;
        if (isset ($node->body)) {
            $word_count = $node->hidden_wordcount;
            $words_per_minute = $node->hidden_words_per_minute;
            $total_time = $node->hidden_time_writing;
            $nid = $node->nid;

            //go through a series of checks to see if javascript is disabled
            if (($word_count == 'nojs') || ($words_per_minute == 'nojs')) {
                $word_count = 0;
                if (isset ($node->body['und'][0]['value'])) {
                    $word_count = str_word_count($node->body['und'][0]['value']);
                }
                $total_time = time() - $node->hidden_time_start; //time now - time when they opened form
                $words_per_minute = ($word_count / $total_time) * 60;
            }

            //this indicates the student is typing increadibly fast...they are probably cheating (copy/paste, ijkl ijkl)
            if ($words_per_minute > 250 && $word_count > 50) {
                $flag = 1;
            }

            db_insert('W365_JournalNodeData')->fields(array(
                'nid' => $node->nid,
                'wordcount' => $word_count,
                'wordsperminute' => $words_per_minute,
                'timewriting' => round($total_time), //time writing in seconds. This field name may not match live db
                'jsdisabled' => $flag,
            ))->execute();

            //Drupal messages
            if ($flag == 0) {
                drupal_set_message(t('New journal entry was created with a word count of @wordcount.', array('@wordcount' => $word_count)));
            } else {
                //warn user to enable javascript
                drupal_set_message(t('In order for the word count to be properly stored, you MUST have Javascript enabled'), 'error');
                watchdog('writing365', 'Journal created without JAVASCRIPT', array(), WATCHDOG_CRITICAL);
            }
        } else {
            drupal_set_message(t('Save of your journal entry failed.'));
            watchdog('writing365', 'Journal insert failed!', array(), WATCHDOG_CRITICAL);
        }
    } else {
        //does not a write 365 journal entry
    }
}

/**
 * Implements hook_node_update()
 */
function writing365_node_update($node)
{
    $type = node_type_get_name($node);
    if ($type == 'Write 365 Journal Entry') {
        $exists = db_query('SELECT nid FROM {W365_JournalNodeData} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
        if ($exists) {
            $nid = '';
            $word_count = 0;
            $words_per_minute = 0;
            $flag = 0;
            $total_time = 0;
            if (isset ($node->body)) {
                $word_count = $node->hidden_wordcount;
                $words_per_minute = $node->hidden_words_per_minute;
                $total_time = $node->hidden_time_writing;
                $nid = $node->nid;
                $saved_node = db_select('W365_JournalNodeData', 'j')
                    ->fields('j', array('wordcount', 'timewriting'))
                    ->condition('nid', $nid)
                    ->execute()
                    ->fetchAll();
                //initial time handles case where user goes to update node and hits submit without editing anything.
                $initial_wordcount = $saved_node[0]->wordcount;
                $initial_timewriting = $saved_node[0]->timewriting;
                //if the wordcount is different, continue updating
                if ($initial_wordcount != str_word_count($node->body['und'][0]['value'])) {

                    //if the wordcount is different and the deault values didn't change, then they must have disabled javascript
                    if ((($word_count == 'nojs') || ($words_per_minute == 'nojs'))) {
                        //set flag
                        $flag = 1;
                        $word_count = str_word_count($node->body['und'][0]['value']);
                        $words_per_minute = 0;
                        $total_time = time() - $node->hidden_time_start + $initial_timewriting; //time now - time when they opened form + previous time
                    }

                    //we need to check if the flag has already been set so we don't overwrite it
                    if ($flag == 0) {
                        $old_flag = db_select('W365_JournalNodeData', 'j')
                            ->fields('j', array('jsdisabled'))
                            ->condition('nid', $nid)
                            ->execute()
                            ->fetchAll();
                        $old_flag = $old_flag[0]->jsdisabled;
                        //if flag is 1 from before, make sure it stays 1 when we update
                        if ($old_flag == 1) {
                            $flag = 1;
                        }
                    }

                    $num_updated = db_update('W365_JournalNodeData')
                        ->fields(array(
                            'nid' => $nid,
                            'wordcount' => (int)$word_count, //do we need (int) here?
                            //'wordsperminute' => (int)($words_per_minute), //removed this from updates because it is inaccurate
                            'timewriting' => round($total_time), //check this field name with live db
                            'jsdisabled' => $flag,
                        ))
                        ->condition('nid', $node->nid)
                        ->execute();

                    //Drupal messages
                    if ($flag == 0) {
                        drupal_set_message(t('Updated journal entry. Word count set to @wordcount.', array('@wordcount' => $word_count)));
                    } else {
                        //warn user to enable javascript
                        drupal_set_message(t('In order for the word count to be properly stored, you MUST have Javascript enabled'), 'error');
                        watchdog('writing365', 'Journal updated without JAVASCRIPT', array(), WATCHDOG_CRITICAL);
                    }
                }
            }
        } else {
            drupal_set_message(t('Updating your journal entry failed.'));
            watchdog('writing365', 'Journal update failed!', array(), WATCHDOG_CRITICAL);
        }
    }
}

/**
 * Implements hook_node_view().
 */
function writing365_node_view($node, $view_mode)
{
    if ($view_mode != 'rss') {
        if ($node->type == 'writing365' && (arg(0) != 'writing365' || arg(1) != $node->uid)) {
            // This goes to l(), which escapes !username in both title and attributes.
            $links['journal_usernames_journal'] = array(
                'title' => t("!username's journal", array('!username' => format_username($node))),
                'href' => "write365/journal/$node->uid",
                'attributes' => array(
                    'title' => t("Read !username's latest journal entries.", array('!username' => format_username($node)))
                )
            );
            $node->content ['links']['writing365'] = array(
                '#theme' => 'links__node__writing365',
                '#links' => $links,
                '#attributes' => array(
                    'class' => array(
                        'links',
                        'inline'
                    )
                )
            );
        }
    }
}

/**
 * Implements hook_form_alter()
 */
function writing365_form_alter(&$form, &$form_state, $form_id)
{
    if ($form_id == 'writing365_node_form') {
        $form['body'][LANGUAGE_NONE][0]['summary']['#access'] = FALSE;

        //hide content by default, javascript will enable the content
        drupal_add_css(drupal_get_path('module', 'writing365') . '/css/hide_textarea.css', 'file');

        //notify user to enable javascript if it is turned off
        $form ['js'] = array(
            '#weight' => '-15',
            '#markup' => '<noscript><h3><font color ="red">You must have javascript enabled to use this site</font></h3></noscript>',
        );
    }
}

/**
 * Implements hook_form_BASE_FORM_alter()
 * Adds the score card and wordcounter
 */
function writing365_form_node_form_alter(&$form, &$form_state)
{
    $content_type = $form ['#node']->type;
    if ($content_type == 'writing365') {
/*        drupal_add_css(drupal_get_path('module', 'writing365') . '/css/scorecard.css', 'file');*/
        drupal_add_js(drupal_get_path('module', 'writing365') . '/js/show_textarea.js', 'file');
        drupal_add_js(drupal_get_path('module', 'writing365') . '/js/wordcounter.js', 'file');
        drupal_add_js(drupal_get_path('module', 'writing365') . '/js/words_per_minute.js', 'file');

        //default journal entry title is needed to not break the javascript when hitting submit...
        //if the node exists, use that name as the journal entry title
        $nid = $form ['nid']['#value'];
        if ($nid) {
            $title = db_select('node', 'n')
                ->fields('n', array('title'))
                ->condition('nid', $nid)
                ->execute()
                ->fetchAll();
            $title = $title[0]->title;
        } else {
            $title = $form['author']['name']['#default_value'] . '\'s journal entry';
        }


        $form ['title']['#default_value'] = $title;

       //scorecard stuff
       /* $form ['fieldset'] = array(
            '#type' => 'fieldset',
            '#title' => t('Score Card'),
            '#weight' => '-13',
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );*/

        /*$form ['fieldset']['scorecard'] = array(
            '#markup' => writing365_scorecard($form),
            '#title' => 'Score Card',
            '#weight' => '-12',
        );*/

        /*$form ['space'] = array(
            '#markup' => '<p>&nbsp;&nbsp;&nbsp;&nbsp;</p></br>',
            '#weight' => '-11',
        );*/

        //placeholder in the form for javascript dependent variables
        $form['hidden_wordcount'] = array(
            '#type' => 'hidden',
            '#default_value' => 'nojs',
        );

        $form['hidden_words_per_minute'] = array(
            '#type' => 'hidden',
            '#default_value' => 'nojs',
        );

        $form['hidden_time_start'] = array(
            '#type' => 'hidden',
            '#default_value' => time(),
        );

        //if the node exists, add to total time writing
        $nid = $form ['nid']['#value'];
        if ($nid) {
            $time_writing = db_select('W365_JournalNodeData', 'j')
                ->fields('j', array('timewriting'))
                ->condition('nid', $nid)
                ->execute()
                ->fetchAll();
            $time_writing = $time_writing[0]->timewriting;
        } else {
            $time_writing = 0;
        }

        //pass initial time writing to js
        drupal_add_js(array('writing365' => array('initial_time_writing' => $time_writing)), array('type' => 'setting'));

        $form['hidden_time_writing'] = array(
            '#type' => 'hidden',
            '#default_value' => $time_writing,
        );

        //markup on the page
        $form['body'][LANGUAGE_NONE][0]['#prefix'] = '
			<div class="wordcountwrapper" id="wordcountwrapper" style="display: inline">
			<h3>You have typed <div id="wordcount" style="display: inline">0</div> words (estimated)</h3></div>';

        $form['body'][LANGUAGE_NONE][0]['#prefix'] .= '<div id="body-add-more-wrapper"></div>';
    }
}

/**
 * Impliments hook_scorecard()
 * @param $form
 * @return string
 */
/*function writing365_scorecard($form)
{
    //if the node exists, look at the scorecard for the person who wrote it
    $uid = get_user_id();
    if (user_access('administer write365')) {
        $nid = $form ['nid']['#value'];
        if ($nid) {
            $uid = db_select('node', 'n')
                ->fields('n', array('uid'))
                ->condition('nid', $nid)
                ->execute()
                ->fetchAll();
            $uid = $uid[0]->uid;    //uid of the owner of the node
        }
    }

    //placeholder for javascript
    $output = '<div class="scorecardwrapper">';
    $output .= '<div class="scorecard">';
    $output .= '<div class="arrows" id="leftarrow"><img src="/sites/all/modules/writing365/images/leftarrow.jpg" title="See the beginning of your score card!"></div>';
    $output .= '<div class="box" id="dow1"></div>';
    $output .= '<div class="box" id="dow2"></div>';
    $output .= '<div class="box" id="dow3"></div>';
    $output .= '<div class="box" id="dow4"></div>';
    $output .= '<div class="box" id="dow5"></div>';
    $output .= '<div class="box" id="dow6"></div>';
    $output .= '<div class="box" id="dow7"></div>';
    $output .= '<div class="box" id="dow8"></div>';
    $output .= '<div class="box" id="dow9"></div>';
    $output .= '<div class="box" id="dow10"></div>';
    $output .= '<div class="arrows" id="rightarrow"><img src="/sites/all/modules/writing365/images/rightarrow.jpg" title="Go forward 10 tiles"></div> </div>';

    //initialize everything
    date_default_timezone_set('America/Los_Angeles');
    $date = date('m/d/Y h:i:s a I', time()); //added 'I' 11-12-15
    $timestamp = time($date);
    $partialData = array();
    $allData = array();
    $unixDay = 24 * 3600; //86400
    $unixHour = 3600; //added 11/-12-15
    $num_loops = 5; //this is the number of times they scroll through the scorecard
    $boolFirstDay = 0; //added 11/-12-15

    for ($i = $num_loops; $i >= 0; $i--) {
        //$firstDayOfArray is a unix timestamp of hour zero of today in pacific time zone.
        //It is the starting place of each small array. The first array, size of 10 will
        //loop over days 29-20, the second will loop over 19-10, the third 9-0 where 0 is
        //today. This expression should not be changed. The value 10 MUST match the number
        //of placeholder boxes in $output if ever changed in the future.
        $firstDayOfArray = (strtotime("midnight", $timestamp)) + $unixDay * (1 - (10 * $i));
        $boolFirstDay = date('I', $firstDayOfArray); // Get the Boolean Daylight time =1 Standard =0 added 11/-12-15
        if ($boolFirstDay == 1) {
            $firstDayOfArray = $firstDayOfArray - $unixHour; //if savings time take away 1 hour from first day of scorecard period.
            $tShift = "Daylight Time";
        } else {
            $tShift = "Standard Time";
        }
        for ($j = 0; $j < 10; $j++) {
            //$someDate is the current date that is being evaluated
            $someDateUnix = $firstDayOfArray + $unixDay * ($j - 10);
            // The following sorts out the cases where the Scorecard period transitions from ST to DT  or vice versa
            // During that period the arithemitic for the midnight hour changes
            $boolSomeDateUnix = date('I', $someDateUnix);
            if (($boolFirstDay == 0) & ($boolSomeDateUnix == 1)) {
                $someDateUnix = $someDateUnix - $unixHour;
            } else if (($boolFirstDay == 1) & ($boolSomeDateUnix == 0)) {
                $someDateUnix = $someDateUnix + $unixHour;
            }

            $someDate = date('m-d-Y', $someDateUnix);
            //query selects one days worth of data
            //---------------------------------------------
            $query = db_select('W365_JournalNodeData', 'j');
            $query->join('node', 'n', 'j.nid = n.nid');
            //need to change to generic user id
            $query->condition('uid', $uid);
            //lower bound
            $query->condition('created', ($someDateUnix), '>=');
            //upper bound
            $query->condition('created', ($someDateUnix + $unixDay), '<');
            $query->orderBy('n.nid', 'ASC');
            //---------------------------------------------
            //execute the query and save important variables
            $numResults = $query->countQuery()->execute()->fetchField();
            $result = $query
                ->fields('j', array('nid', 'wordcount'))
                ->fields('n', array('created'))
                ->execute()
                ->fetchAll();
            if ($numResults) {
                //student could have multiple entries in one day, add up all words in all entries
                $totalWords = 0;
                foreach ($result as $field) {
                    $totalWords = $totalWords + $field->wordcount;
                    //the last node created for that will be hyperlinked on the scorecard
                    $nid = $field->nid;
                }
                //store total results in a small array that will eventually be appended to a larger one
                $partialData[] = array('Date' => $someDate, 'Words' => $totalWords, 'nid' => $nid);
            } else { //they didn't write anything on that day
                $partialData[] = array('Date' => $someDate, 'Words' => '0');
            }
            //reset totalWords
            $totalWords = 0;
        }
        //append 10 days worth of data into the big array
        $allData[] = $partialData;
        //reset vars
        unset($partialData);
        $j = 0;
    }

    global $base_url; //something.oregonstate.edu/
    //passing variables to javascript in the file scorecard.js
    drupal_add_js(array('writing365' => array('jsonArray' => $allData)), array('type' => 'setting')); //array of data
    drupal_add_js(array('writing365' => array('num_loops' => $num_loops)), array('type' => 'setting')); //# of scrolls in scorecard
    drupal_add_js(array('writing365' => array('basepath' => $base_url)), array('type' => 'setting')); //basepath for links to edit nodes
    drupal_add_js(drupal_get_path('module', 'writing365') . '/js/scorecard.js');

    //return plain markup that the javascript will overwrite later
    return $output;
}*/

/**
 * Implements hook_menu().
 */
function writing365_menu()
{
    $items['write365/dashboard'] = array(
        'title' => 'Write365 Dashboard',
        'description' => 'Dashboard for login user',
        'page callback' => 'user_dashboard',
        'access arguments' => array('create write365 content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'writing365.pages.inc'
    );

    $items['write365/journal'] = array(
        'title' => 'Write365 Journal',
        'description' => 'Shows the dashboard for the login user',
        'page callback' => 'user_journal',
        'access arguments' => array('create write365 content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'writing365.pages.inc'
    );

    $items['write365/dashboard/%user'] = array(
        'title' => 'Write365 Dashboard (Admin)',
        'description' => 'Shows the dashboard of a given user',
        'page callback' => 'adm_user_dashboard',
        'page arguments' => array(2),
        'access arguments' => array('administer write365'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'writing365.pages.inc'
    );
    $items['write365/journal/%user'] = array(
        'title' => 'Write365 Dashboard (Admin)',
        'description' => 'Shows the journal of a given user',
        'page callback' => 'adm_user_journal',
        'page arguments' => array(2),
        'access arguments' => array('administer write365'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'writing365.pages.inc'
    );

    return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function writing365_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
    //global $user;

    // Add action link to 'node/add/writing365' on 'journal' page.
    if ($root_path == 'writing365') {
        $item = menu_get_item('node/add/writing365');
        if ($item['access']) {
            $item['title'] = t('Create new journal entry');
            $data['actions']['output'][] = array(
                '#theme' => 'menu_local_action',
                '#link' => $item,
            );
        }
    }    // Provide a helper action link to the author on the 'writing365/%' page.
    elseif ($root_path == 'write365/journal/%' && $router_item ['page_arguments'][0]->uid == get_user_id()) {
        $data ['actions']['output']['writing365'] = array(
            '#theme' => 'menu_local_action',
        );
        if (user_access('create write365 content')) {
            $data['actions']['output']['writing365']['#link']['title'] = t('Create new journal entry');
            $data['actions']['output']['writing365']['#link']['href'] = 'node/add/writing365';
        } else {
            $data['actions']['output']['writing365']['#link']['title'] = t('You are not allowed to create a new journal entry.');
        }
    }
}

/**
 * Implements hook_block_info().
 */
function writing365_block_info()
{
    $block ['recent'] = array(
        'info' => t('Recent journal entries'),
        'properties' => array(
            'administrative' => TRUE,
        ),
    );
    $block ['calendar'] = array(
        'info' => t('Calendar'),
        'status' => TRUE,
        'region' => 'primary_sidebar',
    );
    $block ['calendar_legend'] = array(
        'info' => t('Calendar Legend'),
        'status' => TRUE,
        'region' => 'primary_sidebar',
    );
    return $block;
}

/**
 * Implements hook_block_configure().
 */
function writing365_block_configure($delta = '')
{
    if ($delta == 'recent') {
        $form ['writing365_block_count'] = array(
            '#type' => 'select',
            '#title' => t('Number of recent journal entries to display'),
            '#default_value' => variable_get('writing365_block_count', 10),
            '#options' => drupal_map_assoc(array(
                2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30
            )),
        );
        return $form;
    }

}

/**
 * Implements hook_block_save().
 */
function writing365_block_save($delta = '', $edit = array())
{
    if ($delta == 'recent') {
        variable_set('writing365_block_count', $edit['writing365_block_count']);
    }
}

/**
 * Implements hook_block_view().
 *
 * Displays the most recent 10 blog titles.
 */
function writing365_block_view($delta = '')
{
    $uid = get_user_id();
    //ddl(user_role_permissions($user -> roles));
    $block = array();
    switch ($delta) {
        case 'recent':
            if (user_access('access content')) {
                $result = db_select('node', 'n')
                    ->fields('n', array(
                        'nid',
                        'title',
                        'created'))
                    ->condition('type', 'writing365')
                    ->condition('status', 1)
                    ->condition('uid', $uid)//added this 1-7-2015
                    ->orderBy('created', 'DESC')
                    ->range(0, variable_get('writing365_block_count', 10))
                    ->addTag('node_access')
                    ->execute();

                if ($node_title_list = node_title_list($result)) {
                    $block ['subject'] = t('Recent journal entries');
                    $block ['content']['writing365_list'] = $node_title_list;
                    $block ['content']['writing365_more'] = array(
                        '#theme' => 'more_link',
                        '#url' => 'writing365',
                        '#title' => t('Read the latest journal entries.'),
                    );
                }

            }
            break;
        case 'calendar':
            if (user_access('access content')) {

                $result = db_select('node', 'n');

                $result->fields('n', array('nid', 'title', 'type'))
                    ->condition('type', 'writing365')
                    ->condition('status', 1)
                    ->condition('uid', $uid)
                    ->addTag('node_access')
                    ->addField('n', 'created', 'date');

                $result->join('wordsalad_score', 'w', 'w.nid = n.nid');
                $result->join('W365_JournalNodeData', 'wc', 'wc.nid = n.nid');


                // Execute the query
                $journalEntries = $result->execute()->fetchAll();

                // Formatting Date for student post
                foreach ($journalEntries as $key => $post) {
                    if (property_exists($post, 'date')) {
                        // January = 0 not 1
                        $day = date('d', $post->date);
                        $month = date('m', $post->date);
                        $year = date('Y', $post->date);
                        // Puts months in javasript date format
                        // January = 0 != 1
                        if ($month - 1 < 0) {
                            $month = 11;
                        } else {
                            $month--;
                        }
                        // Add a 0 for months less then 10
                        if ($month < 10) {
                            $month = '0' . $month;
                        }
                        $journalEntries[$key]->date = $year . '-' . $month . '-' . $day;
                    }
                }

                /* -- Loading TACAL -- */
                // TACAL resources
                /*drupal_add_css(drupal_get_path('module', 'writing365') . '/plugin/tacal/css/TACAL.css', 'file');*/
                drupal_add_css(drupal_get_path('module', 'writing365') . '/css/entry-calendar.css', 'file');
                /*drupal_add_js(drupal_get_path('module', 'writing365') . '/plugin/tacal/js/TACAL.js', 'file');*/


                // Custom js
                drupal_add_js(drupal_get_path('module', 'writing365') . '/js/render-calendar.js', 'file');
                drupal_add_js(array('writing' => array('posts' => json_encode($journalEntries))), array('type' => 'setting'));

                $content = '<div id="entry-calendar"></div>';

                $block ['subject'] = t('Calendar');
                $block ['content'] = $content;

            }
        break;
        case 'calendar_legend':
            if (user_access('access content')) {
                $content = '<div class="tacal-legend">
  <div class="title-legend">
    <span>TACAL Legend</span>
  </div>
  <span class="date-title-legend">Date of the Month</span>
  <hr class="tacal-hr-legend"/>
  <div class="wordcount-legend">
    <span class="wordcount-title-legend">Word Count Scale</span>
    <div class="wordcount-scale-wrapper">
      <span class="low-legend">1 - 349</span>
      <span class="medium-legend">350 - 370</span>
      <span class="high-legend">371 - up</span>
    </div>
  </div>
  <hr class="tacal-hr-legend"/>
  <div class="wordsalad-legend">
    <span class="wordsalad-title-legend">WordSalad Legend</span>
    <div class="wordsalad-wrapper">
      <span class="iswordsalad-legend">Is</span>
      <span class="notwordsalad-legend">Not</span>
    </div>
  </div>
</div>';
                $block['subject'] = t('Calendar Legend');
                $block ['content'] = $content;
            }
        break;
    }
    return $block;
}

/**
 * Implements hook_permission()
 */
function writing365_permission()
{
    return array(
        'administer write365' => array(
            'title' => t('Administer Write 365'),
            'description' => t('Administer module and view all Write 365 content')
        ),
        'create write365 content' => array(
            'title' => t('Create Write 365 Journal Entry'),
            'description' => t('Basic Write 365 journal access')
        ),
    );
}

/**
 * Development utility to check roles.
 */
function writing365_role_check($account)
{
    if (!user_access('administer write365')) {
        return;
    }
    // get user roles.
    $list = $account->roles;
    if (!empty ($list)) {
        // Prepare the information for themeing
        $variables = array('items' => $list);
        $content = theme('item_list', $variables);
        // Attach the content to the user page according to the API.
        $account->content ['summary']['output'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('User roles'),
            '#markup' => $content,
            '#attributes' => array(
                'class' => array('content-creation')
            )
        );
    }
}

/**
 * Development utility to check the content types that a user can create
 */
function writing365_content_type_check($account)
{
    if (!user_access('administer write365')) {
        return;
    }
    // Get the defined node types
    $node_types = node_permissions_get_configured_types();
    if (empty($node_types)) {
        return;
    }
    // Make an array for the list output.
    $list = array();
    foreach ($node_types as $type) {
        if (user_access('administer write365')) {
            // Get the human-readable name for the content type.
            $list[] = check_plain(node_type_get_name($type));
        }
    }
    if (!empty ($list)) {
        // prepare the information for theming.
        $variables = array(
            'items' => $list,
        );
        $content = theme('item_list', $variables);
        // Attach the content to the user page according to the API.
        if (!isset ($account->content ['example'])) {
            $account->content ['example'] = array();
        }
        $account->content ['example'] += array(
            '#type' => 'user_profile_category',
            '#attributes' => array(
                'class' => array(
                    'user-member',
                ),
            ),
            '#weight' => 5,
            '#title' => t('Content ')
        );
        $account->content ['example']['output'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Content creation permissions'),
            '#markup' => $content,
            '#attributes' => array(
                'class' => array(
                    'content-creation'
                ),
            ),
        );
    }
}

/**
 * Implements hook_user_view().
 */
function writing365_user_view($account)
{
    // role check debug function
    writing365_role_check($account);
    // content-type creation function
    writing365_content_type_check($account);
    if (user_access('create write365 content', $account)) {
        if (_writing365_post_exists($account)) {
            if (user_access('administer write365')){
                $markup = l(t('View recent journal entries'), "write365/journal/$account->uid", array(
                    'attributes' => array(
                        'title' => t("Read !username's latest journal entries.", array('!username' => format_username($account)))

                    )));
            }
            else {
                $markup = l(t('View recent journal entries'), "write365/journal", array(
                    'attributes' => array(
                        'title' => t("Read !username's latest journal entries.", array('!username' => format_username($account)))

                    )));
            }
            $account->content ['summary']['writing365'] = array(
                '#type' => 'user_profile_item',
                '#title' => t('Write 365 Journal'),
                // l() escapes the attributes, so we should not escape !username here.
                '#markup' => $markup
                    ,
                '#attributes' => array(
                    'class' => array(
                        'journal'
                    )
                )
            );

            $account->content ['summary']['worldsalad'] = array(
                '#type' => 'user_profile_time',
                '#title' => t('wordsalad'),
                '#markup' => '<h1>This is a test</h1>'
            );
        } else {
            return;
        }
    } else {
        return;
    }
}

/**
 * Implements hook_help().
 */
function writing365_help($path, $arg)
{
    switch ($path) {
        case 'admin/help#writing365' :
            $output = '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t("The Writing 365 module extends the Drupal Core blog module and allows registered users to maintain a daily online journal. Writing 365 journals are made up of individual <em>journal entries</em>. By default, the journal entries are displayed by creation time in descending order, with comments disabled. For more information, see the online handbook entry for <a href='@write365'>Write 365 module</a>.", array('@write365' => 'http://write365.tac.oregonstate.edu/about')) . '</p>';
            $output .= '<h3>' . t('Uses') . '</h3>';
            $output .= '<dl>' . '<dt>' . t('Single-user blogs') . '</dt>';
            $output .= '<dd>' . t("Each student's journal entries are automatically displayed with a link to the user's main journal page. You can create as many single-user journals as you have site users with permission to create Writing 360 journal content.") . '</dd>';
            $output .= '<dd>' . t("However, unlike the Blog module, Write 365 journals are private and can only be viewed by the individual who wrote them.");
            $output .= '</dl>';
            return $output;
    }
}

/**
 * Implements hook_view().
 */
function writing365_view($node, $view_mode)
{
    if ($view_mode == 'full' && node_is_page($node)) {
        // Breadcrumb navigation. l() escapes title, so we should not escape !name.
        drupal_set_breadcrumb(array(
            l(t('Home'), NULL),
            l(t('Writing 365'), 'writing365'),
            l(t("!name's journal", array(
                '!name' => format_username($node)
            )), 'write365/journal/' . $node->uid)
        ));
    }
    return $node;
}

/**
 * Access callback for user blog pages.
 *
 * This is not a hook, so we need to check how it's implemented.
 *
 * @todo check
 */
function writing365_page_user_access($account)
{
    // The visitor must be able to access the site's content.
    // For a blog to 'exist' the user must either be able to
    // create new blog entries, or it must have existing posts.
    return $account->uid && user_access('create write365 content') && (user_access('create write365 content', $account) || _writing365_post_exists($account));
}

/**
 * Helper function to return the home/landing page for write 365 module
 */
function _writing365_home()
{

}

/**
 * Implements hook_form().
 */
function writing365_form($node, $form_state)
{
    //drupal_set_message('Write 365 will be taken offline for maintenance Friday, February 12, at 8 am, Pacific, and it will be offline for approximately 2 hours.');
    //drupal_set_message('Write 365 will be inaccessible during this maintenance period. Please plan accordingly.');
    return node_content_form($node, $form_state);
}

/**
 *
 * Implements hook_form_alter()
 * Removes the summary fleld from the form
 */

/**
 * Helper function to determine if a user has journal posts already.
 */
function _writing365_post_exists($account)
{
    return (bool)db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', 'writing365')
        ->condition('uid', $account->uid)
        ->condition('status', 1)
        ->range(0, 1)
        ->addTag('node_access')
        ->execute()
        ->fetchField();
}


//grabs the uid from the currently logged in user running this script
function get_user_id()
{
    //read the difference between $user and $account at: https://www.drupal.org/node/892008
    global $user;
    return $user->uid;
}


/**
 * Implements hook_rdf_mapping().
 */
function writing365_rdf_mapping()
{
    return array(
        array(
            'type' => 'node',
            'bundle' => 'writing365',
            'mapping' => array(
                'rdftype' => array(
                    'sioc:Post',
                    'sioct:JournalPost'
                )
            )
        )
    );
}